<?php

/* Please see README.txt for copyright and contributor notices */

/**
 * Implements hook_form_alter().
 */
function html_export_og_form_alter(&$form, &$form_state, $form_id) {
  // default the publishing form to og_active_paths
  $group = og_context();
  if ($form_id == '_html_export_job_page' && isset($group->nid)) {
    $form['path_selector']['#default_value'] = 'og_active_paths';
  }
}
/**
 * Implements hook_html_export_add_path_provider().
 */
function html_export_og_html_export_add_path_provider() {
  $items = array();
  $group = og_context();
  // only add to the list of available if its og
  if (isset($group->nid)) {
    $items['og_active_paths'] = array(
      'title' => 'Select all nodes in this group',
      'callback' => '_html_export_og_active_og_nodes',
    );
  }
  return $items;
}

/**
 * Implements hook_html_export_add_path_provider_alter().
 */
function html_export_og_html_export_add_path_provider_alter($providers) {
  $group = og_context();
  // if we are in a group prune core options that dont make sense
  if (isset($group->nid)) {
    unset($providers['core_all_nodes']);
    unset($providers['core_all_paths']);
    // alter type exports to account for og
    $avail_types = variable_get('html_export_available_types', array());
    foreach ($avail_types as $key => $type) {
      $providers['types_' . $key]['callback'] = '_html_export_node_type_og';
    }
  }
}

/**
 * Callback for og_active_paths provider.
 */
function _html_export_og_active_og_nodes() {
  $paths = array();
  $group = og_context();
  // grab all nodes the user has access to
  $result = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->join('og_ancestry', 'oga', 'n.nid = oga.nid')
  ->condition('oga.group_nid', $group->nid)
  ->addTag('node_access')
  ->execute();
  foreach ($result as $val) {
    $paths['node/' . $val->nid] = 'node/' . $val->nid;
  }
  return $paths;
}

/**
 * Callback for og version of type provider.
 */
function _html_export_node_type_og($type) {
  $paths = array();
  $group = og_context();
  // grab all nodes the user has access to for this type
  $result = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->join('og_ancestry', 'oga', 'n.nid = oga.nid')
  ->condition('oga.group_nid', $group->nid)
  ->condition('type', $type)
  ->addTag('node_access')
  ->execute();
  foreach ($result as $val) {
    $paths['node/' . $val->nid] = 'node/' . $val->nid;
  }
  return $paths;
}

/**
 * Implements hook_html_export_data_alter().
 *
 * @param $required['paths']
 * @param $required['active_path']
 * @param $optional['dom_remove']
 * @param $optional['remove_base']
 *
 */
function html_export_og_html_export_data_alter(&$data, $required = array(), $optional = array()) {

  $paths = $required['paths'];
  $active_path = $required['active_path'];
  $dom_remove = isset($optional['dom_remove']) ? $optional['dom_remove'] : array();
  $remove_base = isset($optional['remove_base']) ? $optional['remove_base'] :  TRUE;

  // only run this if purl is installed as it gets complicated
  if (module_exists('purl')) {
    $tmp = explode('/', $active_path);
    if ($tmp[0] == 'node') {
      $node = node_load($tmp[1]);
      // if this is the group type and purl is set
      if (og_is_group_type($node->type) && isset($node->purl)) {
        $data = str_replace('/' . $node->purl . '/', '/', $data);
      }
      elseif (isset($node->og_groups) && count($node->og_groups) == 1) {
        // set the group because one is set for this to target
        $group = node_load(array_pop($node->og_groups));
        // if purl is set for the group wipe, otherwise we wasted time :)
        if (isset($group->purl)) {
          $data = str_replace('/' . $group->purl . '/', '/', $data);
        }
      }
      else {
        // do nothing, purl wasn't found on whatever the content was
      }
    }
  }
}
